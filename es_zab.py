import re
import sys
import requests
from ast import literal_eval
from params import par_gen
from pprint import pprint as pp


def es_nodename():
    es_config_path = 'esconf.yml'
    try:
        esconf = open(es_config_path, 'r').read()
        es_nodename = re.search(r'(node\.name:\s\")([\w,\s]+)(\")', esconf).group(2)
        return es_nodename
    except:
        print("Link to Elastic config file is BAD or missing")


node_url = 'http://my.server.com:9200/_nodes/%s/stats/_all' % es_nodename()

try:
    r = requests.get(node_url, auth=('admin', 'admin'))  # , timeout=(3, 10))
    node_stats = r.json()

except:
    print('!!! CRITICAL ERROR : Requests module has problem with reading data from source !!!')

try:
    cd = requests.get('http://my.server.com:9200/_cluster/state', auth=('admin', 'admin'))  # , timeout=(3, 10))
    cluster_state = cd.json()
except:
    print('!!! CRITICAL ERROR : Requests module has problem with reading data from source !!!')

try:
    r = requests.get('http://my.server.com:9200/_cluster/stats', auth=('admin', 'admin'))  # , timeout=(3, 10))
    cluster_stats = r.json()
except:
    print('!!! CRITICAL ERROR : Requests module has problem with reading data from source !!!')


def main(sep="-", *args, **kwargs):
    par_gen(cluster_state, filename='cluster_state', sep=sep)

    par_gen(cluster_stats, filename='cluster_stats', sep=sep)

    par_gen(node_stats, filename='node_stats', sep=sep)


def get_value(source, par_num=0, par_name=None, sep='-'):
    """returns value for parameter or parameter num

        Arguments:
        :param source: json file, dictionary generated by main(), key: integer=>0
                                                           value: parameter
        Keyword arguments:
        :param par_num: key from parameters dictionary
        :param sep:
        :param par_name: value from parameters dictionary

    """

    with open(source + '.json', mode='r') as f:
        g = f.read()
        x = literal_eval(g)  # x = file conversion to dict

        if par_name:
            return eval(source + conv2key(par_name, sep=sep))

        else:
            return eval(source + conv2key(x[par_num], sep=sep))


def conv2key(source_key, sep='-'):
    """Converts str from src file to key literal
    :param source_key: value from dictionary of cluster/node parameters
    :param sep:
    """
    e = source_key.split(sep)
    d = '\'][\''.join(e)
    f = '[\'' + d + '\']'
    return f


if __name__ == "__main__":
    main()
